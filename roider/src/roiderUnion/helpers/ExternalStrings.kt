package roiderUnion.helpers

import java.lang.Exception

object ExternalStrings {
    const val DEBUG_NULL = "NULL"

    private const val STRINGS = "data/strings/strings.json"

    private const val ID = "roider"
    private fun get(id: String): String {
        return Helper.settings?.getString(ID, id) ?: "N/A $id"
    }

    private fun getList(id: String): List<String> {
        val result = mutableSetOf<String>()
        try {
            val json = Helper.settings?.loadJSON(STRINGS, Helper.modId)
            val array = json?.getJSONObject(ID)?.getJSONArray(id) ?: throw NullPointerException()
            for (i in array.length() - 1 downTo 0 ) result += array.get(i).toString()
        } catch (ex: Exception) {
            return listOf(DEBUG_NULL)
        }
        return result.toList()
    }

    val LAZY_LIB_REQ = get("lazyLibReq")
    val MAGIC_LIB_REQ = get("magicLibReq")

    fun String.inParenthesis(): String {
        return "($this)"
    }
    fun String.replaceNumberToken(num: Number): String {
        return this.replace(TOKEN_NUMBER, num.toString())
    }

    const val TOKEN_NUMBER = "\$number"
    val NUMBER_PLUS = get("numberPlus")
    val NUMBER_MINUS = get("numberMinus")
    val NUMBER_PERCENT = get("numberPercent")
    val NUMBER_PLUS_PERCENT = get("numberPlusPercent")
    val NUMBER_MINUS_PERCENT = get("numberMinusPercent")

    val GAS_GIANT_GRAV_WELL = get("giantPlanetGravityWell")
    val NEBULA_GAS_GIANT_GRAV_WELL = get("nebulaGiantPlanetGravityWell")
    val INNER_JP = get("innerJp")
    val INNER_SYSTEM_JP = get("innerSystemJp")
    val OUTER_SYSTEM_JP = get("outerSystemJp")
    val FRINGE_SYSTEM_JP = get("fringeSystemJp")

    val PARASITIC_SPORES = get("parasiticSporesFallback")
    val PSYCHOACTIVE_FUNGUS = get("psychoactiveFungusFallback")

    val ATKA = get("atka")
    val ATKA_PRIMARY = get("atkaPrimary")
    val KOROVIN = get("korovin")
    val ROCKPIPER_PERCH = get("rockpiperPerch")
    val KOROVIN_L5_TROJANS = get("korovinL5Trojans")
    val COLD_ROCK = get("coldRock")
    val COLD_ROCK_BASTION = get("coldRockBastion")
    val AKUTAN = get("akutan")
    val KALEKHTA = get("kalekhta")
    val KALEKHTA_L4_TROJANS = get("kalekhtaL4Trojans")
    val PRIEST = get("kalekhtaPriest")
    val MAKUSHIN = get("makushin")
    val POINT_CHEERFUL = get("pointCheerful")
    val ATKA_OUTER_RIM = get("atkaOuterRim")

    val ATTU = get("attu")
    val ATTU_PRIMARY = get("attuPrimary")
    val MOFFET = get("moffet")
    val HOLTZ = get("holtz")
    val AGATTU = get("agattu")

    val KISKA = get("kiska")
    val DRUZHININS = get("druzhinins")
    val DRUZHININS_BELT = get("druzhininsBelt")
    val THREE_SISTERS = get("threeSisters")
    val ZIN = get("zinStation")
    val LORAN = get("loran")
    val GEE = get("gee")

    val OUNALASHKA = get("ounalashka")
    val OUNALASHKA_PRIMARY = get("ounalashkaPrimary")
    val OUNALASHK_RINGS = get("ounalashkaRings")
    val OUNALASHKA_GATE = get("ounalashkaGate")
    val MAGGIES = get("maggies")
    val AMAKNAK = get("amaknak")
    val DUTCH_HARBOR = get("dutchHarbor")
    val OGLODAK = get("oglodak")
    val OGLODAK_TROJANS = get("oglodakTrojans")
    val ROUND = get("round")

    val MAGGIE_FIRST = get("maggie_firstName")
    val MAGGIE_LAST = get("maggie_lastName")

    val LEWIS_FIRST = get("lewis_firstName")
    val LEWIS_LAST = get("lewis_lastName")

    val SW_BLURB = get("sw_blurb")
    val SW_OPTION = get("sw_option")
    val SW_BP_REQ = get("sw_bpReq")
    val SW_BP_UNKNOWN = get("sw_bpUnknown")
    val SW_BP_UNKNOWN_TT = get("sw_bpUnknownTt")

    val MRP_FIRST_NAME = get("mrp_firstName")
    val MRP_LAST_NAME = get("mrp_lastName")
    val MRP_PICK_SHIP = get("mrp_pickShip")
    val MRP_NO_MIDAS_SHIPS = get("mrp_noMidasShips")
    val MRP_OK = get("mrp_ok")
    val MRP_CANCEL = get("mrp_cancel")
    val MRP_HIMSELF = get("mrp_himself")
    val MRP_HERSELF = get("mrp_herself")
    val MRP_MADMAN = get("mrp_madman")
    val MRP_MADWOMAN = get("mrp_madwoman")

    val RETRO_HIS = get("retro_his")
    val RETRO_HER = get("retro_her")
    val RETRO_HE = get("retro_he")
    val RETRO_SHE = get("retro_she")
    val RETRO_BLURB = get("retro_blurb")
    val RETRO_OPTION = get("retro_option_std")
    val RETRO_OPTION_FIRST = get("retro_option_first")
    val RETRO_OPTION_PAY = get("retro_option_pay")
    val RETRO_OPTION_TALK = get("retro_option_talk")
    val RETRO_DESC_FIRST = get("retro_desc_first")
    val RETRO_DESC_BACK = get("retro_desc_back")
    val RETRO_DESC_FULL = get("retro_desc_full")
    val RETRO_DESC_LIGHT = get("retro_desc_light")
    val RETRO_DESC_EXTRA = get("retro_desc_extra")
    val RETRO_DESC_PAY = get("retro_desc_pay")
    val RETRO_DESC_PREPAID = get("retro_desc_prepaid")
    val RETRO_DESC_OPTION_PAY = get("retro_desc_option_pay")
    val RETRO_DESC_OPTION_TT_POOR = get("retro_desc_option_tt_poor")
    val RETRO_DESC_OPTION = get("retro_desc_option_std")
    val RETRO_DESC_OPTION_LEAVE = get("retro_desc_option_leave")
    val RETRO_NO_SERVICE = get("retro_noService")
    val RETRO_NO_SERVICE_FIRST1 = get("retro_noServiceFirst1")
    val RETRO_NO_SERVICE_FIRST2 = get("retro_noServiceFirst2")
    val RETRO_NO_SERVICE_FIRST3 = get("retro_noServiceFirst3")
    val RETRO_NO_SERVICE_FIRST4 = get("retro_noServiceFirst4")

    val ARGOS_DESC = get("argos_description")
    val ARGOS_NO_DOCKS = get("argos_noDocks")
    val ARGOS_LOW_CR = get("argos_lowCR")
    val ARGOS_HOSTILE_TRACKING = get("argos_hostileTracking")
    val ARGOS_READY = get("argos_ready")
    val ARGOS_ABILITY_ADDED = get("argos_abilityAdded")
    val ARGOS_ACTIVE = get("argos_active")
    val ARGOS_ACTIVE_DOCKS = get("argos_activeDocks")
    val ARGOS_AVAILABLE = get("argos_available")
    val ARGOS_AVAILABLE_DOCKS = get("argos_availableDocks")
    val ARGOS_CR_COST = get("argos_crCost")
    val ARGOS_CR_COST_ILLEGAL = get("argos_crCostIllegal")
    val ARGOS_RESOURCES_REQ = get("argos_rezReq")
    val ARGOS_RESOURCES_GIVE = get("argos_rezGive")
    val ARGOS_RESOURCES_REQ_ILLEGAL = get("argos_rezReqIllegal")
    val ARGOS_RESOURCES_GIVE_ILLEGAL = get("argos_rezGiveIllegal")
    val ARGOS_CONFIRM_PAY = get("argos_confirmPay")
    val ARGOS_CONFIRM_GET = get("argos_confirmGet")
    val ARGOS_CONFIRM_PAY_MANY = get("argos_confirmPayMany")
    val ARGOS_CONFIRM_GET_MANY = get("argos_confirmGetMany")
    val ARGOS_CONFIRM_HIGHLIGHT = get("argos_confirmHL")
    val ARGOS_PICK_DOCKS_OPTION = get("argos_pickDocksOption")
    val ARGOS_PICK_DOCKS_NONE = get("argos_pickDocksNone")
    val ARGOS_NEED_DOCK = get("argos_needDock")
    val ARGOS_NEED_CR = get("argos_needCR")
    val ARGOS_NEED_CR_THEM = get("argos_needCRThem")
    val ARGOS_NEED_REZ = get("argos_needRez")
    val ARGOS_PAY_REZ = get("argos_payRez")
    val ARGOS_GET_REZ = get("argos_getRez")
    val ARGOS_REZ_FREE = get("argos_rezFree")

    val PING_TRAP_ACTIVE = get("pingTrap_active")
    val PING_TRAP_FAIL1 = get("pingTrap_fail1")
    val PING_TRAP_FAIL2 = get("pingTrap_fail2")

    val RETROFIT_BP_NAME = get("retrofitBp_name")
    val RETROFIT_BP_SHIPS = get("retrofitBp_ships")
    val RETROFIT_BP_SOURCES = get("retrofitBp_sources")
    val RETROFIT_BP_PREFIX = get("retrofitBp_prefix")
    val RETROFIT_BP_KNOWN = get("retrofitBp_known")
    val RETROFIT_BP_LEARN = get("retrofitBp_learn")
    val RETROFIT_BP_KNOW_ONE = get("retrofitBp_knowOne")
    val RETROFIT_BP_ALREADY_KNOWN = get("retrofitBp_alreadyKnown")
    val RETROFIT_BP_ACQUIRED = get("retrofitBp_acquired")
    val RETROFIT_BP_KNOW_ONE_EXT = get("retrofitBp_knowOneExt")
    val RETROFIT_BP_HULL = get("retrofitBp_hull")
    val RETROFIT_BP_HULLS = get("retrofitBp_hulls")
    val RETROFIT_BP_KNOWN_SHIP = get("retrofitBp_knownShip")
    val RETROFIT_BP_UNKNOWN = get("retrofitBp_unknown")
    val RETROFIT_BP_NONE = get("retrofitBp_none")
    val RETROFIT_BP_AND_OTHER = get("retrofitBp_andOther")

    val SYSTEM_ACTIVE = get("system_active")
    val SYSTEM_READY = get("system_ready")
    val SYSTEM_OUT_OF_RANGE = get("system_outOfRange")
    val SYSTEM_NO_TARGET = get("system_noTarget")
    val SYSTEM_NONE = get("system_none")

    val HULLMOD_CANT_INSTALL = get("hullmod_cantInstall")
    val HULLMOD_NO_PHASE = get("hullmod_noPhase")
    val HULLMOD_HAS_FIGHTERS = get("hullmod_hasFighters")
    val HULLMOD_STD_FIGHTERS = get("hullmod_stdFighters")
    val HULLMOD_NO_ARMOR_MODULE = get("hullmod_noArmorModule")
    val HULLMOD_NO_ARCADE = get("hullmod_noArcade")

    val DREAD_FLUX_BUFF = get("dread_fluxBuff")
    val DREAD_ROF_BUFF = get("dread_rofBuff")
    val DREAD_DAM_BUFF = get("dread_damBuff")

    val ENTROPY_FLOATY = get("entropyAmp_floaty")
    val ENTROPY_PLAYER_STATUS = get("entropyAmp_playerStatus")
    val ENTROPY_TARGET_STATUS = get("entropyAmp_targetStatus")

    val INTERDICTOR_FLOATY = get("interdictor_floaty")

    val PHASENET_TITLE = get("phasenet_title")
    val PHASENET_SHIP_STATUS = get("phasenet_shipStatus")
    val PHASENET_ASTEROID_STATUS = get("phasenet_asteroidStatus")
    val PHASENET_PULL_SINGLE = get("phasenet_pullSingle")
    val PHASENET_PULL_MULTI = get("phasenet_pullMulti")

    val MIDAS_ARMOR = get("midasArmor")
    val MIDAS_ARMOR_TELAMON = get("midasArmor_telamon")
    val MIDAS_ARMOR_FIRESTORM = get("midasArmor_firestorm")

    val ARGOS_SALVAGE_DESC = get("argos_salvageDesc")
    val ARGOS_SALVAGE_CR = get("argos_salvageCr")
    val ARGOS_SALVAGE_REMOVE = get("argos_salvageRemove")
    val ARGOS_SALVAGE_ADD = get("argos_salvageAdd")

    val BREAKERS_REQ = get("breakers_req")

    val TRACKER_SWAP_ARGOS = get("trackers_argos")
    val TRACKER_SWAP_SWITCHED = get("trackers_switched")

    val NOMAD_BASE_ENTITY_NAME = get("nomadBaseEntityName")
    val NOMAD_GROUP_PREFIXES = getList("nomadGroupPrefixes")
    val NOMAD_GROUP_POSTFIXES = getList("nomadGroupPostfixes")
    val NOMAD_GROUP_DESCRIPTIONS = getList("nomadGroupDescriptions")
    val NOMAD_BASE_PREFIXES = getList("nomadBasePrefixes")
    val NOMAD_BASE_POSTFIXES = getList("nomadBasePostfixes")
    val NOMAD_NO_RAID = get("nomad_noRaid")
    val NOMAD_NO_BOMBARD = get("nomad_noBombard")
    val NOMAD_DEVELOPMENT = get("nomad_development")
    val NOMAD_SUPPLY = get("nomad_supply")
    val NOMAD_SUPPLY_IN_FACTION = get("nomad_supplyInFaction")
    val NOMAD_BASE_SORT_STRING = get("nomad_sortString")
    val NOMAD_BASE_KNOWN = get("nomad_baseKnown")
    val NOMAD_BASE_LOC_UNKNOWN = get("nomad_baseLocUnknown")
    val NOMAD_BASE_DISCOVERED = get("nomad_baseDiscovered")
    val NOMAD_BASE_ABANDONED = get("nomad_baseAbandoned")
    val NOMAD_BASE_DESTROYED = get("nomad_baseDestroyed")
    val NOMAD_BASE_BASE_DESC = get("nomad_baseDesc")
    val NOMAD_BASE_STARTING_DESC = get("nomad_startingDesc")
    val NOMAD_BASE_ESTABLISHED_DESC = get("nomad_establishedDesc")
    val NOMAD_BASE_BATTLESTATION_DESC = get("nomad_battlestationDesc")
    val NOMAD_BASE_SHIPWORKS_DESC = get("nomad_shipworksDesc")
    val NOMAD_BASE_HQ_DESC = get("nomad_hqDesc")
    val NOMAD_BASE_CAPITAL_DESC = get("nomad_capitalDesc")
    val NOMAD_BASE_UNKNOWN_DESC = get("nomad_unknownDesc")
    val NOMAD_BASE_RECENT_EVENTS = get("nomad_recentEvents")
    val NOMAD_BASE_DESTROYED_EVENT = get("nomad_baseDestroyedEvent")
    val NOMAD_BASE_DESTROYED_EVENT_PLAYER = get("nomad_baseDestroyedEventPlayer")
    val NOMAD_BASE_DESTROYED_EVENT_RUMOR = get("nomad_baseDestroyedEventRumor")
    val NOMAD_BASE_ABANDONED_EVENT = get("nomad_baseAbandonedEvent")
    val NOMAD_RETROFIT_OPTION = get("nomad_retrofitOption")
    val NOMAD_RETROFIT_BLURB = get("nomad_retrofitBlurb")

    val MINING_SCOUT_HYPER = get("miningScoutHyper")
    val MINING_SCOUT_LOCAL = get("miningScoutHyper")

    val MINING_LOAD = get("miningLoad")
    val MINING_TRAVEL_HYPER = get("miningTravelHyper")
    val MINING_TRAVEL = get("miningTravel")
    val MINING_MINE = get("miningMine")
    val MINING_COLLECT = get("miningCollect")
    val MINING_HARVEST = get("miningHarvest")
    val MINING_RETURN = get("miningReturn")
    val MINING_UNLOAD = get("miningUnload")
    val MINING_CLOUD = get("miningCloudName")
    val MINING_SPOT = get("miningSpotName")

    val BASE_VALUE = get("baseValue")
    val INDUSTRY_REQ_SPACEPORT = get("industry_reqSpaceport")

    val DIVES_MINING = get("dives_mining")
    val DIVES_NO_MINING = get("dives_noMining")
    val DIVES_DR_FIND = get("dives_drFind")
    val DIVES_DR_REPLACE = get("dives_drReplace")
    val DIVES_VOID  = get("dives_void")
    val DIVES_PLANET  = get("dives_planet")
    val DIVES_SYSTEM  = get("dives_system")
    val DIVES_DRUGS = get("dives_drugs")
    val DIVES_DRUGS_SHORTAGE = get("dives_drugsShortage")
    val DIVES_BP_REQUIRED = get("dives_bpRequired")

    val CHARTER_PRODUCTION1 = get("charter_production1")
    val CHARTER_PRODUCTION2 = get("charter_production2")

    val HQ_BP_REQUIRED = get("unionHQ_bpRequired")
    val HQ_DISABLED = get("unionHQ_disabled")
    val HQ_MINING = get("unionHQ_mining")
    val HQ_NO_MINING = get("unionHQ_mining")
    val HQ_EXTRA = get("unionHQ_extra")
    val HQ_LIMITED_CONVERSIONS = get("unionHQ_conversions")
    val HQ_MILITARY_FULL = get("unionHQ_militaryFull")
    val HQ_MILITARY_PARTIAL = get("unionHQ_militaryPartial")

    val SW_ALPHA = get("shipworks_alpha")
    val SW_UNAVAIL = get("shipworks_unavail")

    val BP_KNOWN = get("bp_known")
    val BP_LEARN = get("bp_learn")

    val BP_HQ_DIVES = get("bp_hq_dives")

    val SUBMARKET_ILLEGAL_SELL = get("submarket_illegalSell")

    val SUBMARKET_HQ_TRANSFER_COM_REQ = get("submarket_hq_transferComReq")
    val SUBMARKET_HQ_TRANSFER_REP_REQ = get("submarket_hq_transferRepReq")
    val SUBMARKET_HQ_TRANSFER_SHIP_COM_REP_REQ = get("submarket_hq_transferShipComRepReq")
    val SUBMARKET_HQ_TRANSFER_SHIP_REP_REQ = get("submarket_hq_transferShipRepReq")
    val SUBMARKET_HQ_TRANSFER_SHIP_COM_REQ = get("submarket_hq_transferShipComReq")
    val SUBMARKET_HQ_TRANSFER_HL1 = get("submarket_hq_transferHl1")
    val SUBMARKET_HQ_TRANSFER_HL2 = get("submarket_hq_transferHl2")
    val SUBMARKET_HQ_TRANSFER_ILLEGAL = get("submarket_hq_transferIllegal")
    val SUBMARKET_HQ_TRANSFER_ILLEGAL_DEFAULT = get("submarket_hq_transferIllegalDefault")
    val SUBMARKET_HQ_TOOLTIP_NON_FUNCTIONAL = get("submarket_hq_tooltipNonFunctional")
    val SUBMARKET_HQ_TOOLTIP_LOW_REP = get("submarket_hq_tooltipLowRep")
    val SUBMARKET_HQ_TOOLTIP_SNEAK = get("submarket_hq_tooltipSneak")

    val SHIP_ARCHIMEDES = get("ship_archimedes")
    val SHIP_CLARKE = get("ship_clarke")
    val SHIP_HORNET = get("ship_hornet")
    val SHIP_RED_CASTLE = get("ship_redCastle")

    val EASY_PREY_PLAYER_SIDE = get("easyPrey_playerSide")
    val EASY_PREY_ENEMY_SIDE = get("easyPrey_enemySide")
    val EASY_PREY_PLAYER_TAG = get("easyPrey_playerSideTag")
    val EASY_PREY_ENEMY_TAG = get("easyPrey_enemySideTag")
    val EASY_PREY_BRIEFING = get("easyPrey_briefing")

    val EYE_PLAYER_SIDE = get("eye_playerSide")
    val EYE_ENEMY_SIDE = get("eye_enemySide")
    val EYE_PLAYER_TAG = get("eye_playerSideTag")
    val EYE_ENEMY_TAG = get("eye_enemySideTag")
    val EYE_BRIEFING = get("eye_briefing")

    val MIDWAY_PLAYER_SIDE = get("midway_playerSide")
    val MIDWAY_ENEMY_SIDE = get("midway_enemySide")
    val MIDWAY_PLAYER_TAG = get("midway_playerSideTag")
    val MIDWAY_ENEMY_TAG = get("midway_enemySideTag")
    val MIDWAY_BRIEFING1 = get("midway_briefing1")
    val MIDWAY_BRIEFING2 = get("midway_briefing2")
    val MIDWAY_BRIEFING3 = get("midway_briefing3")
}